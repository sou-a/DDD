datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  previewFeatures = ["selectRelationCount"]
  provider        = "prisma-client-js"
}

model User {
  id            String @id
  userStatusId  String
  name          String
  mailAddress   String

  userStatus UserStatus @relation(fields: [userStatusId], references: [id])
  pair       PairUser?
  team       TeamUser?
  tasks      TaskUser[]
}

// ここDBのアンチパーンに該当するので新井さんのようにわけるのがベターのはずなのですが、
// リポジトリでの処理が1集約1リポジトリでどうやるんだ？と思っていたので、私わけられなかったんですよね-...
// リポジトリも見させていただきますね
model UserStatus {
  id   String @id
  name String @unique

  users User[]
}

model Pair {
  id   String @id
  name String

  users PairUser[]
}

model PairUser {
  pairId String
  userId String @unique

  user User @relation(fields: [userId], references: [id])
  pair Pair @relation(fields: [pairId], references: [id])

  // 複合主キーですか👀これは思いつかなかったです！なるほど...
  // これで所属するということを実現できるのかぁ
  @@id([pairId, userId])
}

model Team {
  id   String @id
  name String @unique

  users TeamUser[]
}

model TeamUser {
  teamId String
  userId String @unique

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@id([teamId, userId])
}

model Task {
  id          String @id
  taskGroupId String
  name        String

  users     TaskUser[]
  taskGroup TaskGroup @relation(fields: [taskGroupId], references: [id])
}

model TaskGroup {
  id   String @id
  name String

  tasks Task[]
}

model TaskUser {
  taskId           String
  userId           String
  taskUserStatusId String

  taskUserStatus TaskUserStatus @relation(fields: [taskUserStatusId], references: [id])
  user           User @relation(fields: [userId], references: [id])
  task           Task @relation(fields: [taskId], references: [id])

  @@id([taskId, userId])
}

model TaskUserStatus {
  id          String @id
  name        String @unique

  taskUsers TaskUser[]
}
